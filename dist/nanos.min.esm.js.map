{
  "version": 3,
  "sources": ["../src/nanos.esm.js"],
  "sourcesContent": ["/*\n * NANOS - Named and numbered ordered storage\n * Copyright 2024-2025 by Kappa Computer Solutions, LLC and Brian Katzung\n * Author: Brian Katzung <briank@kappacs.com>\n */\n\nimport { escapeJSString, unescapeJSString } from './vendor/escape-js.esm.js';\n\n//////////////////////////////////////////////////////////////////////\n// SLID and QJSON parsing details\n//////////////////////////////////////////////////////////////////////\n\n// SysCL List Data lexical token regexps\nconst slidPats = {\n    mlc: '/\\\\*.*?\\\\*/',\t\t// Multi-line comment\n    // Numbers\n    flt: '[+-]?\\\\d+(?:[.]\\\\d+)?(?:[eE][+-]?\\\\d+)?(?![0-9a-zA-Z])',\n    int: '[+-]?(?:0[bB][01]+|0[oO][0-7]+|0[xX][0-9a-fA-F]+|\\\\d+)n?(?![0-9a-zA-Z])',\n    sqs: \"'(?:\\\\\\\\'|[^'])*'\",\t// Single-quoted string\n    dqs: '\"(?:\\\\\\\\\"|[^\"])*\"',\t// Double-quoted string\n    stok: '[[=\\\\]]',\t\t// Special tokens\n    spc: '\\\\s+',\t\t// Space\n    oth: '(?:[^\\'\"/[=\\\\]\\\\s]|\\\\/(?![*]))+',\t// Other\n};\nconst slidRE = new RegExp('(' + 'mlc flt int sqs dqs stok spc oth'.split(' ').map((k) => slidPats[k]).join('|') + ')', 's');\nconst slidNum = new RegExp(`^(${slidPats.flt}|${slidPats.int})$`);\n\nconst qjMap = { '{': '[', '}': ']', ',': ' ', ':': '=' };\n\n//////////////////////////////////////////////////////////////////////\n\n/**\n * Checks if a key is a valid array index.\n * @param {string} key\n * @returns {boolean}\n */\nexport const isIndex = (key) => /^(?:0|[1-9]\\d*)$/.test(key);\n\n/**\n * Checks if a key is a negative index.\n * @param {string} key\n * @returns {boolean}\n */\nexport const isNegIndex = (key) => /^-[1-9]\\d*$/.test(key);\n\n/**\n * Checks if a value is a plain object.\n * @param {*} value\n * @returns {boolean}\n */\nconst isPlainObject = (value) => {\n    if (typeof value !== 'object' || value === null) return false;\n    const consName = value?.constructor?.name;\n    return (consName === undefined || consName === 'Object');\n};\n\n/**\n * Named and Numbered Ordered Storage.\n * @class\n */\nexport class NANOS {\n    /**\n     * Creates a new NANOS instance.\n     * @param {...*} items\n     */\n    constructor (...items) {\n\tthis._options = {};\n\tthis.clear();\n\tthis.push(...items);\n    }\n\n    /**\n     * Get value at key or index (negative index relative to end).\n     * @param {string|number|Array.<(string|number)>} key\n     * @param {*} [defVal]\n     * @returns {*}\n     */\n    at (key, defVal) {\n\tif (Array.isArray(key)) {\n\t    let next = this;\n\t    for (const curKey of key) {\n\t\tif (!(next instanceof NANOS) || !next.has(curKey)) return defVal;\n\t\tnext = next.at(curKey);\n\t    }\n\t    return next;\n\t}\n\tthis._rio?.depend();\n\tkey = this.#wrapKey(key);\n\treturn Object.hasOwn(this._storage, key) ? this._storage[key] : defVal;\n    }\n\n    /**\n     * Clears the NANOS instance.\n     * @returns {this}\n     */\n    clear () {\n\tif (this._locked) throw new TypeError('NANOS: Cannot clear after locking');\n\tthis._next = 0;\n\tthis._keys = [];\n\tthis._storage = {};\n\tthis._lockInd = undefined;\n\tdelete this._redacted;\n\tthis._rio?.changed();\n\treturn this;\n    }\n\n    /**\n     * Freezes this NANOS and all nested NANOS values recursively.\n     * @returns {this}\n     */\n    deepFreeze () {\n\tthis.freeze();\n\tfor (const [_key, value] of this.entries()) {\n\t    if (value instanceof NANOS) {\n\t\tvalue.deepFreeze();\n\t    }\n\t}\n\treturn this;\n    }\n\n    /**\n     * Deletes a key-value pair.\n     * NOTE: unlike the delete statement, this returns the deleted value!\n     * @param {string|number} key\n     * @returns {*}\n     */\n    delete (key) {\n\tif (this._locked) throw new TypeError('NANOS: Cannot delete after locking');\n\tconst skey = String(key);\n\tconst ret = this._storage[skey];\n\tif (Object.hasOwn(this._storage, skey)) {\n\t    delete this._storage[skey];\n\t    this._keys = this._keys.filter((k) => k !== skey);\n\t    this._rio?.changed();\n\t}\n\treturn ret;\n    }\n\n    /** Signals a dependency for reactive interfaces. */\n    depend () { this._rio?.depend(); }\n\n    /**\n     * Returns an iterator of [key, value] pairs.\n     * Compact mode uses numeric index keys instead of the standard strings\n     * (e.g. 0 instead of '0').\n     * @param {boolean} [compact=false]\n     * @yields {[string|number, *]}\n     */\n    *entries (compact = false) {\n\tthis._rio?.depend();\n\tconst ik = compact ? ((k) => isIndex(k) ? parseInt(k, 10) : k) : ((k) => k);\n\tfor (const k of this._keys) yield [ ik(k), this._storage[k] ];\n    }\n\n    /**\n     * Returns a shallow copy of elements for which f(value, key) is true.\n     * @param {function(*, string|number, NANOS): boolean} f\n     * @returns {NANOS}\n     */\n    filter (f) {\n\tthis._rio?.depend();\n\tconst result = new this.constructor();\n\tresult.fromEntries([...this.entries()].filter((kv) => f(kv[1], kv[0], this)));\n\treturn result;\n    }\n\n    /**\n     * Returns first [key, value] where f(value, key) is true; cf find, findIndex.\n     * @param {function(*, string|number, NANOS): boolean} f\n     * @returns {[string|number, *]|undefined}\n     */\n    find (f) {\n\tthis._rio?.depend();\n\tconst s = this._storage;\n\tfor (const k of this._keys) if (f(s[k], k, this)) return [k, s[k]];\n    }\n\n    /**\n     * Returns last [key, value] where f(value, key) is true; cf findLast, findLastIndex.\n     * @param {function(*, string|number, NANOS): boolean} f\n     * @returns {[string|number, *]|undefined}\n     */\n    findLast (f) {\n\tthis._rio?.depend();\n\tconst s = this._storage;\n\tfor (const k of this._keys.toReversed()) if (f(s[k], k, this)) return [k, s[k]];\n    }\n\n    /**\n     * Executes a function for each element.\n     * @param {function(*, string|number, NANOS): void} f\n     */\n    forEach (f) {\n\tthis._rio?.depend();\n\tfor (const k of this._keys) f(this._storage[k], k, this);\n    }\n\n    /**\n     * Renders the NANOS completely locked and immutable.\n     * @returns {this}\n     */\n    freeze () {\n\tif (!Object.isFrozen(this)) {\n\t    this._locked = true;\n\t    this._lockInd = true;\n\t    Object.freeze(this);\n\t}\n\tObject.freeze(this._keys);\n\tObject.freeze(this._storage);\n\tif (typeof this._redacted === 'object') Object.freeze(this._redacted);\n\treturn this;\n    }\n\n    /**\n     * Populates from an array of entries.\n     * @param {Array<[string|number, *]>} entries\n     * @param {boolean} [insert=false]\n     * @returns {this}\n     */\n    fromEntries (entries, insert = false) {\n\tif (this._locked) throw new TypeError('NANOS: Cannot fromEntries after locking');\n\tif (insert && this._lockInd) throw new TypeError('NANOS: Cannot insert fromEntries after index lock');\n\tconst batch = this._rio?.batch || ((cb) => cb());\n\tbatch(() => {\n\t    if (insert) for (const e of [...entries].reverse()) this.set(e[0], e[1], true);\n\t    else for (const e of entries) this.set(e[0], e[1]);\n\t    this._rio?.changed();\n\t});\n\treturn this;\n    }\n\n    /**\n     * Populates from a list of key-value pairs.\n     * Can be [ key1, value1, ... keyN, valueN ]\n     * or { type: '@NANOS@', next, pairs }\n     * @param {...*} pairs\n     * @returns {this}\n     */\n    fromPairs (...pairs) {\n\tif (this._locked) throw new TypeError('NANOS: Cannot fromPairs after locking');\n\tconst batch = this._rio?.batch || ((cb) => cb());\n\tif (pairs[0]?.type === '@NANOS@') {\n\t    batch(() => {\n\t\tthis.fromPairs(pairs[0].pairs);\n\t\tthis.next = pairs[0].next;\n\t\tthis._rio?.changed();\n\t    });\n\t    return this;\n\t}\n\tif (Array.isArray(pairs[0])) pairs = pairs[0];\n\tconst end = pairs.length - 1;\n\tbatch(() => {\n\t    for (let i = 0; i < end; i += 2) {\n\t\tif (pairs[i] === undefined && !(i + 1 in pairs)) ++this._next;\n\t\telse this.set(pairs[i], pairs[i + 1]);\n\t    }\n\t    this._rio?.changed();\n\t});\n\treturn this;\n    }\n\n    /**\n     * Checks for the existence of a key.\n     * Instead of \"key in NANOS\".\n     * @param {string|number} key\n     * @returns {boolean}\n     */\n    has (key) {\n\tthis._rio?.depend();\n\treturn Object.hasOwn(this._storage, this.#wrapKey(key));\n    }\n\n    /**\n     * Checks if a value exists.\n     * @param {*} value\n     * @returns {boolean}\n     */\n    includes (value) {\n\treturn this.keyOf(value) !== undefined;\n    }\n\n    /**\n     * Iterates over indexed entries.\n     * @param {boolean} [compact=false]\n     * @yields {[string|number, *]}\n     */\n    *indexEntries (compact = false) {\n\tfor (const e of this.entries(compact)) if (isIndex(e[0])) yield e;\n    }\n\n    /**\n     * Iterates over index keys.\n     * @yields {string}\n     */\n    *indexKeys () {\n\tthis._rio?.depend();\n\tfor (const k of this._keys) if (isIndex(k)) yield k;\n    }\n\n    /**\n     * Is a key/value (or, if undef, the key-set) locked?\n     * @param {string|number} [key]\n     * @returns {boolean}\n     */\n    isLocked (key) {\n\tthis._rio?.depend();\n\tif (key === undefined) return !!this._locked;\t// Key-set locked\n\tkey = this.#wrapKey(key);\n\tif (this._locked && !Object.hasOwn(this._storage, key)) return true;\n\treturn !Object.getOwnPropertyDescriptor(this._storage, key)?.writable;\n    }\n\n    /**\n     * Is a key/value redacted?\n     * @param {string|number} key\n     * @returns {boolean}\n     */\n    isRedacted (key) {\n\tthis._rio?.depend();\n\tif (this._redacted === true) return true;\n\tkey = this.#wrapKey(key);\n\tif (isIndex(key)) return !!this._redacted?.[0];\n\treturn !!this._redacted?.[key];\n    }\n\n    /**\n     * Returns first key/index with matching value, or undefined; cf indexOf.\n     * @param {*} value\n     * @returns {string|number|undefined}\n     */\n    keyOf (value) { return this.find((v) => v === value)?.[0]; }\n\n    /**\n     * Returns an iterator for the keys.\n     * @returns {Iterator<string>}\n     */\n    keys () {\n\tthis._rio?.depend();\n\treturn this._keys.values();\n    }\n\n    /**\n     * Returns last key/index with matching value, or undefined; cf lastIndexOf.\n     * @param {*} value\n     * @returns {string|number|undefined}\n     */\n    lastKeyOf (value) {\n\treturn this.findLast((v) => v === value)?.[0];\n    }\n\n    /**\n     * Lock specific *values* by key (doesn't affect key addition/removal).\n     * @param {...(string|number)} keys\n     * @returns {this}\n     */\n    lock (...keys) {\n\tif (keys.length === 1 && Array.isArray(keys[0])) keys = keys[0];\n\tfor (let key of keys) {\n\t    key = this.#wrapKey(key);\n\t    if (isIndex(key)) this._lockInd = true;\n\t    if (key !== undefined) Object.defineProperty(this._storage, key, {\n\t\tvalue: this.at(key), enumerable: true,\n\t\twritable: false, configurable: false\n\t    });\n\t}\n\tthis._rio?.changed();\n\treturn this;\n    }\n\n    /**\n     * Lock all current (and possibly new) *values* (doesn't affect keys).\n     * @param {boolean} [andNew=false]\n     * @returns {this}\n     */\n    lockAll (andNew = false) {\n\tif (andNew) this._lockNew = true;\n\tthis.lock(this._keys);\n\treturn this;\n    }\n\n    /**\n     * Lock the *key* set (no new keys or indexes, but unlocked values can still change).\n     * @returns {this}\n     */\n    lockKeys () {\n\tthis._locked = true;\n\tthis._rio?.changed();\n\treturn this;\n    }\n\n    /**\n     * Determine if a value is map-like (key: value, ...).\n     * @param {*} value\n     * @returns {boolean}\n     */\n    #mapish (value) {\n\treturn (isPlainObject(value) || (!this._options.opaqueMaps && value instanceof Map));\n    }\n\n    /**\n     * Iterates over named entries.\n     * @yields {[string, *]}\n     */\n    *namedEntries () {\n\tfor (const e of this.entries()) if (!isIndex(e[0])) yield e;\n    }\n\n    /**\n     * Iterates over named keys.\n     * @yields {string}\n     */\n    *namedKeys () {\n\tfor (const e of this.entries()) if (!isIndex(e[0])) yield e[0];\n    }\n\n    /**\n     * \"Next\" index (max index + 1); similar to array.length.\n     * @returns {number}\n     */\n    get next () {\n\tthis._rio?.depend();\n\treturn this._next;\n    }\n    /**\n     * Sets the next index, truncating if necessary.\n     * @param {number} nn\n     */\n    set next (nn) {\n\tif (this._locked) throw new TypeError('NANOS: Cannot set next after locking');\n\tif (!Number.isInteger(nn) || nn < 0) return;\n\tfor (let i = this._next; --i >= nn; this.delete(i));\n\tif (this._next !== nn) {\n\t    this._next = nn;\n\t    this._rio?.changed();\n\t}\n    }\n\n    /**\n     * Return the current options.\n     * @returns {object}\n     */\n    get options () {\n\treturn Object.assign({}, this._options);\n    }\n\n    /**\n     * Returns a flat array of key-value pairs.\n     * @param {boolean} [compact=false]\n     * @returns {Array<*>}\n     */\n    pairs (compact = false) {\n\treturn [...this.entries(compact)].flat(1);\n    }\n\n    /**\n     * Parse relaxed, \"quasi-JSON\" (by way of SLID).\n     * The distinction between { } and [ ] is ignored.\n     * Values may be separated by commas or spaces.\n     * Text without special characters need not be quoted.\n     * Key-value pairs may be separated by `:` or `=`.\n     * @param {string} str\n     * @returns {NANOS}\n     */\n    static parseQJSON (str) {\n\treturn parseSLID('[(' + str.replaceAll(/^\\s*[\\[\\{]?|[\\]\\}]\\s*$/g, '')\n\t.split(/(\"(?:\\\\\\\\\"|[^\"])*\")/)\n\t.map((s) => (s[0] === '\"') ? s : s.replace(/[{},:]/g, (c) => qjMap[c]))\n\t.join('') + ')]', true);\n    }\n\n    /**\n     * Parse SLID-format data, returning (potentially nested) NANOS.\n     * @param {string} str\n     * @param {boolean} [qj=false]\n     * @returns {NANOS}\n     */\n    static parseSLID (str, qj = false) {\n\tlet match = str.match(/\\[\\((.*?)\\)\\]/s);\n\tif (!match) throw new SyntaxError('Missing SLID boundary marker(s)');\n\tconst tokens = match[1].replace(/\\)\\\\\\]/g, ')]').split(slidRE).filter((t) => !/^(\\s*|\\/\\*.*\\*\\/)$/.test(t));\n\tmatch = undefined;\n\tconst parseLeft = () => {\t// Can be left of = (numbers, strings)\n\t    const token = tokens.shift();\n\t    if (slidNum.test(token)) {\n\t\tif (/n$/i.test(token)) return BigInt(token.slice(0, -1));\n\t\tif (/^[+-]?0b/i.test(token)) return parseInt(token.replace(/0b/i, ''), 2);\n\t\tif (/^[+-]?0o/i.test(token)) return parseInt(token.replace(/0o/i, ''), 8);\n\t\tif (/^[+-]?0x/i.test(token)) return parseInt(token.replace(/0x/i, ''), 16);\n\t\treturn parseFloat(token);\n\t    }\n\t    if (token === \"'\" || token === '\"') throw new SyntaxError(`Unmatched ${token} in SLID`);\n\t    if (token[0] !== \"'\" && token[0] !== '\"') return token;\n\t    return unescapeJSString(token.slice(1, -1));\n\t}\n\tconst parseRight = () => {\t// More that can be right of =\n\t    if (tokens[0] !== '[') {\n\t\tif (qj) switch (tokens[0]) {\n\t\tcase 'false': tokens.shift(); return false;\n\t\tcase 'null': tokens.shift(); return null;\n\t\tcase 'true': tokens.shift(); return true;\n\t\t} else switch (tokens[0]) {// Special values\n\t\tcase '@f': tokens.shift(); return false;\n\t\tcase '@n': tokens.shift(); return null;\n\t\tcase '@t': tokens.shift(); return true;\n\t\tcase '@u': tokens.shift(); return undefined;\n\t\t}\n\t\treturn parseLeft();\t// Everything OK on the left\n\t    }\n\t    tokens.shift();\n\t    return parseItems.call(this);\t// Nested lists\n\t}\n\tconst parseItems = () => {\n\t    const result = new NANOS();\n\t    while (tokens.length && tokens[0] !== ']') {\n\t\tlet key;\t\t\t// Default: positional\n\t\tif (tokens[1] === '=') {\t// Named value\n\t\t    key = parseLeft();\n\t\t    tokens.shift();\n\t\t} else if (!qj && tokens[0] === '@e') {\t// Empty\n\t\t    tokens.shift();\n\t\t    ++result.next;\n\t\t    continue;\n\t\t}\n\t\tresult.set(key, parseRight());\n\t    }\n\t    if (tokens[0] === ']') tokens.shift();\n\t    return result;\n\t}\n\tconst result = parseItems();\n\t// SLID was malformed if any tokens are left\n\tif (tokens.length) throw new SyntaxError('Malformed SLID');\n\treturn result;\n    }\n\n    /**\n     * Like Array.pop (only applies to indexed values).\n     * @returns {*}\n     */\n    pop () {\n\tif (this._locked) throw new TypeError('NANOS: Cannot pop after locking');\n\tif (this._lockInd) throw new TypeError('NANOS: Cannot pop after index lock');\n\tif (!this._next) return undefined;\n\treturn this.delete(--this._next);\n    }\n\n    /**\n     * Appends new elements.\n     * When pushing transparent objects (array, NANOS, object), named keys\n     * are set directly and index keys are appended as an offset from _next\n     * (therefore preserving any gaps).\n     * Push [ object ] to add the actual object itself.\n     * @param {...*} values\n     * @returns {this}\n     */\n    push (...values) {\n\tif (this._locked) throw new TypeError('NANOS: Cannot push after locking');\n\tconst batch = this._rio?.batch || ((cb) => cb());\n\tconst options = this._options, transform = options.transform;\n\tconst pushEntries = (entries, next = 0) => {\n\t    const base = this._next, minNext = base + next;\n\t    for (let [key, value] of entries) {\n\t\tif (isIndex(key)) {\n\t\t    // Positional: preserve sparseness, potentially transforming\n\t\t    // map-ish and set-ish values into nested NANOS\n\t\t    const newKey = base + parseInt(key, 10);\n\t\t    if (transform && (this.#mapish(value) || this.#setish(value))) value = this.similar(value);\n\t\t    this.set(newKey, value);\n\t\t} else this.set(key, value);\n\t    }\n\t    if (this._next < minNext) this._next = minNext;\n\t};\n\tconst mergeMaps = (entries) => {\n\t    for (let [key, value] of entries) {\n\t\tif (isIndex(key)) {\n\t\t    // Positional maps get merged; positional sets become nested NANOS\n\t\t    if (this.#mapish(value)) mergeMaps((new this.constructor(value)).entries());\n\t\t    else {\n\t\t\tif (this.#setish(value)) value = this.similar(value);\n\t\t\tthis.set(undefined, value);\n\t\t    }\n\t\t} else {\n\t\t    // Named values just get set (promoting transparent containers)\n\t\t    this.set(key, value);\n\t\t}\n\t    }\n\t};\n\tconst pushInner = (transform === 'sets') ? mergeMaps : pushEntries;\n\tconst pushOuter = (outer) => {\n\t    if (isPlainObject(outer)) pushInner(Object.entries(outer));\n\t    else if (Array.isArray(outer)) pushInner(Object.entries(outer), outer.length);\n\t    else if (outer instanceof NANOS) pushInner(outer.entries(), outer.next);\n\t    else if (!options.opaqueMaps && outer instanceof Map) pushInner(outer.entries());\n\t    else if (!options.opaqueSets && outer instanceof Set) pushInner([...outer.values()].entries());\n\t    else this.set(undefined, outer);\n\t};\n\tbatch(() => values.forEach(pushOuter));\n\treturn this;\n    }\n\n    /**\n     * Redacts values from string output.\n     * NOTE: Only affects value returned by toString().\n     * @param {...(string|number|boolean)} keys\n     * @returns {this}\n     */\n    redact (...keys) {\n\tfor (const key of keys) {\n\t    if (key === true) this._redacted = true;\n\t    if (this._redacted === true) return;\n\t    this._redacted ||= {};\n\t    if (isIndex(key)) this._redacted[0] = true;\n\t    else this._redacted[key] = true;\n\t}\n\tthis._rio?.changed();\n\treturn this;\n    }\n\n    /**\n     * Internal method to renumber indices.\n     * @param {number} from\n     * @param {number} to\n     * @param {number} by\n     */\n    #renumber (from, to, by) {\n\tconst move = (k, by) => {\n\t    if (Object.hasOwn(this._storage, k)) {\n\t\tthis._storage[k + by] = this._storage[k];\n\t\tdelete this._storage[k];\n\t    }\n\t};\n\n\tif (by > 0) {\n\t    if (to + by > this._next) this._next = to + by;\n\t    for (let k = to; --k >= from; ) move(k, by);\n\t} else if (by < 0) {\n\t    if (to >= this._next) this._next += by;\n\t    for (let k = from; k < to; ++k) move(k, by);\n\t}\n\tif (by) this._keys = this._keys.map((key) => {\n\t    const ind = isIndex(key) && parseInt(key, 10);\n\t    if (ind !== false && ind >= from && ind < to) return ind + by + '';\n\t    return key;\n\t});\n    }\n\n    /**\n     * Reverse *in place*.\n     * @returns {this}\n     */\n    reverse () {\n\tif (this._locked) throw new TypeError('NANOS: Cannot reverse after locking');\n\tconst s = this._storage, nks = [], ns = {}, last = this._next - 1;\n\tfor (const ok of this._keys.toReversed()) {\n\t    const nk = isIndex(ok) ? String(last - parseInt(ok, 10)) : ok;\n\t    ns[nk] = s[ok];\n\t    nks.push(nk);\n\t}\n\tthis._storage = ns;\n\tthis._keys = nks;\n\tthis._rio?.changed();\n\treturn this;\n    }\n\n    /**\n     * Returns an iterator of [key, value] pairs in reverse (last-to-first key order).\n     * Compact mode uses numeric index keys instead of the standard strings\n     * (e.g. 0 instead of '0').\n     * @param {boolean} [compact=false]\n     * @yields {[string|number, *]}\n     */\n    *reverseEntries (compact = false) {\n\tthis._rio?.depend();\n\tconst ik = compact ? ((k) => isIndex(k) ? parseInt(k, 10) : k) : ((k) => k);\n\tfor (const k of this._keys.toReversed()) yield [ ik(k), this._storage[k] ];\n    }\n\n    /**\n     * Get/set reactive-interface object.\n     * @returns {object|undefined}\n     */\n    get rio () { return this._rio; }\n\n    /**\n     * @param {object|undefined} r\n     */\n    set rio (r) {\n\tif (!r) delete this._rio;\n\telse if ((r?.batch && r.changed && r.create && r.depend)) this._rio = r;\n    }\n\n    /**\n     * Sets a key-value pair.\n     * If the key is undefined, the next sequential index is used.\n     * New keys are added in the first (insert true) or last (insert false)\n     * possible position that maintain increasing-index ordering constraints.\n     * @param {string|number} [key]\n     * @param {*} value\n     * @param {boolean} [insert=false]\n     * @returns {*}\n     */\n    set (key, value, insert = false) {\n\tif (this._locked) throw new TypeError('NANOS: Cannot set after locking');\n\tif (key === undefined) key = this._next;\n\tkey = this.#wrapKey(key);\n\tif (key === undefined) return;\n\tconst skey = String(key);\n\tconst ind = isIndex(skey) && parseInt(skey, 10);\n\tlet changed = false;\n\n\tif (!Object.hasOwn(this._storage, skey)) {\n\t    // The key or index is new; add it in the proper place\n\t    changed = true;\n\t    if (insert) {\n\t\tif (ind === false || !this._next) this._keys.unshift(skey);\n\t\telse {\n\t\t    // Earliest placement maintaining ascending index order\n\t\t    let ki = this._keys.length;\n\t\t    while (ki > 0 && (!isIndex(this._keys[ki - 1]) || ind < this._keys[ki - 1])) --ki;\n\t\t    this._keys.splice(ki, 0, skey);\n\t\t}\n\t    } else { // append\n\t\tif (ind === false || ind >= this._next) this._keys.push(skey);\n\t\telse {\n\t\t    // Latest placement maintaining ascending index order\n\t\t    let ki = 0;\n\t\t    while (ki < this._keys.length && (!isIndex(this._keys[ki]) || ind > this._keys[ki])) ++ki;\n\t\t    this._keys.splice(ki, 0, skey);\n\t\t}\n\t    }\n\t    if (ind !== false && ind >= this._next) this._next = ind + 1;\n\t}\n\n\tif (this._options.transform && (this.#setish(value) || this.#mapish(value))) {\n\t    // Convert transparent containers to NANOS\n\t    this._storage[skey] = this.similar(value);\n\t} else {\n\t    this._storage[skey] = value;\n\t}\n\tif (this._lockNew) this.lock(skey);\n\tif (changed) this._rio?.changed();\n\treturn value;\n    }\n\n    /**\n     * Determine if a value is set-like (value, ...).\n     * @param {*} value\n     * @returns {boolean}\n     */\n    #setish (value) {\n\treturn (Array.isArray(value) || (!this._options.opaqueSets && value instanceof Set));\n    }\n\n    /**\n     * Set (merge) options\n     * @param {object} options\n     * @returns {this}\n     *\n     * opaqueMaps - Treat Map objects as opaque\n     * opaqueSets - Treat Set objects as opaque\n     * transform - Promote map-ish or set-ish values into nested NANOS objects,\n     *     or merge them into the containing NANOS object, depending on the setting\n     */\n    setOptions (options) {\n\tObject.assign(this._options, options);\n\treturn this;\n    }\n\n    /**\n     * Fluent interface for setting the RIO.\n     * @param {object} r\n     * @returns {this}\n     */\n    setRIO (r) {\n\tthis.rio = r;\n\treturn this;\n    }\n\n    /**\n     * Like Array.shift (only applies to indexed values).\n     * @returns {*}\n     */\n    shift () {\n\tif (this._locked) throw new TypeError('NANOS: Cannot shift after locking');\n\tif (this._lockInd) throw new TypeError('NANOS: Cannot shift after index lock');\n\tif (!this._next) return undefined;\n\tconst batch = this._rio?.batch || ((cb) => cb());\n\treturn batch(() => {\n\t    const res = this.delete(0);\n\t    this.#renumber(1, this._next, -1);\n\t    return res;\n\t});\n    }\n\n    /**\n     * Size of list (# of keys / indexes).\n     * @returns {number}\n     */\n    get size () {\n\tthis._rio?.depend();\n\treturn this._keys.length;\n    }\n\n    /**\n     * Return a similarly-configured new NANOS.\n     * @param {...*} items\n     * @returns {NANOS}\n     */\n    similar (...items) {\n\tconst nn = new this.constructor();\n\tnn.setOptions(this._options);\n\tnn.rio = this._rio?.create();\n\tif (items.length) nn.push(...items);\n\treturn nn;\n    }\n\n    /**\n     * Gets the underlying storage object.\n     * @returns {object}\n     */\n    get storage () {\n\tthis._rio?.depend();\n\treturn this._storage;\n    }\n\n    /**\n     * Returns a reversed copy.\n     * @returns {NANOS}\n     */\n    toReversed () {\n\tthis._rio?.depend();\n\treturn this.similar().fromPairs(this.toJSON()).reverse();\n    }\n\n    /**\n     * Returns a JSON-representable object.\n     * Might be the best we can do.\n     * @returns {{type: string, next: number, pairs: Array<*>}}\n     */\n    toJSON () {\n\tthis._rio?.depend();\n\treturn {type:'@NANOS@', next: this._next, pairs: this.pairs(true)};\n    }\n\n    /**\n     * Generate SLID (SysCL List Data)-format string.\n     * @param {{compact?: boolean, redact?: boolean}} [options]\n     * @returns {string}\n     */\n    toSLID ({ compact = false, redact = false } = {}) {\n\tthis._rio?.depend();\n\tconst escape = (str) => escapeJSString(str).replace(/\\)]/g, ')\\\\]');\n\tfunction squished (items) {\n\t    const parts = [];\n\t    for (const item of items) {\n\t\tconst tail = parts.length ? parts.slice(-1).slice(-1) : '';\n\t\tconst joint = tail + (item[0] || '')/* head */;\n\t\tif (tail && !/['\"\\[\\]]/.test(joint)) parts.push(' ');\n\t\tparts.push(item);\n\t    }\n\t    return parts.join('');\n\t}\n\tfunction valueToStr (value) {\n\t    switch (value) {\n\t    case false: return '@f';\n\t    case null: return '@n';\n\t    case true: return '@t';\n\t    case undefined: return '@u';\n\t    }\n\t    switch (typeof value) {\n\t    case 'bigint': return value.toString() + 'n';\n\t    case 'number': return value.toString();\n\t    case 'string':\n\t\t// Word-literal or quoted string\n\t\tif (/^[!()*.,:;<>?A-Z{}_][!()*.,0-9:;<>?@A-Z{}_-]*$/i.test(value)) return value;\n\t\treturn \"'\" + escape(value) + \"'\";\n\t    }\n\t    if (isPlainObject(value) || Array.isArray(value) || value instanceof Map || value instanceof Set) value = new this.constructor(value);\n\t    if (value instanceof NANOS) return '[' + itemsToStr(value) + ']';\n\t    return '@u/*??*/';\n\t};\n\tfunction itemsToStr (node) {\n\t    let expInd = 0;\t\t\t// Expected next index\n\t    if (redact && node._redacted === true) return ((redact === 'comment') ? '/*???*/' : '');\n\t    const items = [];\n\t    for (const en of node.entries()) {\n\t\tif (isIndex(en[0])) {\n\t\t    if (redact && node.isRedacted(0)) {\n\t\t\tif (redact === 'comment') items.push('/*?*/');\n\t\t\tcontinue;\n\t\t    }\n\t\t    const ind = parseInt(en[0], 10);\n\t\t    items.push(((ind === expInd) ? '' : `${ind}=`) + valueToStr(en[1]));\n\t\t    expInd = ind + 1;\n\t\t} else {\n\t\t    if (redact && node.isRedacted(en[0])) {\n\t\t\tif (redact === 'comment') items.push('/*?=?*/');\n\t\t    } else items.push(valueToStr(en[0]) + '=' + valueToStr(en[1]));\n\t\t}\n\t    }\n\t    return (compact ? squished(items) : items.join(' '));\n\t};\n\treturn '[(' + itemsToStr(this).replace(/\\)\\]/g, ')\\\\]') + ')]';\n    }\n\n    /**\n     * Converts to a string (SLID format).\n     * @param {object} [options]\n     * @returns {string}\n     */\n    toString (options = {}) {\n\treturn this.toSLID({ redact: true, ...options });\n    }\n\n    /**\n     * Prepends new elements.\n     * Unshift works like push, except that indexed values are offset-from-0\n     * inserted instead (therefore preserving any gaps).\n     * @param {...*} items\n     * @returns {this}\n     */\n    unshift (...values) {\n\tif (this._locked) throw new TypeError('NANOS: Cannot unshift after locking');\n\tif (this._lockInd) throw new TypeError('NANOS: Cannot unshift after index lock');\n\tconst batch = this._rio?.batch || ((cb) => cb());\n\tbatch(() => values.toReversed().forEach((outer) => {\n\t    if (!(outer instanceof NANOS)) outer = new this.constructor(outer);\n\t    this.#renumber(0, this._next, outer.next);\n\t    this.fromEntries(outer.entries(), true);\n\t}));\n\treturn this;\n    }\n\n    /**\n     * Return a (sparse) iterator of *indexed* values.\n     * @yields {*}\n     */\n    *values () {\n\tthis._rio?.depend();\n\tfor (const index of this.indexKeys()) yield this.at(index);\n    }\n\n    /**\n     * Internal method to handle negative indices.\n     * @param {string|number} key\n     * @returns {string|number|undefined}\n     */\n    #wrapKey (key) {\n\tif (isNegIndex(key)) {\n\t    key = parseInt(key, 10) + this._next;\n\t    if (key < 0) return;\n\t}\n\treturn key;\n    }\n}\n\n// Alias .get() to .at()\nNANOS.prototype.get = NANOS.prototype.at;\n\nNANOS.toSLID = (value, options = {}) => {\n    if (value instanceof NANOS) return value.toSLID(options);\n    else return new NANOS(value).toSLID(options);\n};\n\n// Make parseQJSON and parseSLID directly importable\nexport const { parseQJSON, parseSLID, toSLID } = NANOS;\nexport { NANOS as default };\n\n// END\n"],
  "mappings": "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",
  "names": ["escapeJSString", "unescapeJSString", "slidPats", "slidRE", "k", "slidNum", "qjMap", "isIndex", "key", "isNegIndex", "isPlainObject", "value", "consName", "NANOS", "items", "defVal", "next", "curKey", "#wrapKey", "_key", "skey", "ret", "compact", "ik", "f", "result", "kv", "s", "entries", "insert", "cb", "e", "pairs", "batch", "end", "v", "keys", "andNew", "#mapish", "nn", "i", "str", "parseSLID", "c", "qj", "match", "tokens", "t", "parseLeft", "token", "parseRight", "parseItems", "values", "options", "transform", "pushEntries", "base", "minNext", "newKey", "#setish", "mergeMaps", "pushInner", "pushOuter", "outer", "#renumber", "from", "to", "by", "move", "ind", "nks", "ns", "last", "ok", "nk", "r", "changed", "ki", "res", "redact", "escape", "squished", "parts", "item", "tail", "joint", "valueToStr", "itemsToStr", "node", "expInd", "en", "index", "parseQJSON", "toSLID"]
}
